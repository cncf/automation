---
name: Docker

# This workflow builds, signs and validates Docker images for CNCF GitHub Actions runners

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: cncf/external-gha-runner
  BOOTY_VERSION: ${{ github.ref_name }}
  BOOTY_TIMESTAMP: ${{ github.event.repository.updated_at}}

jobs:
  build:
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build-and-push.outputs.digest }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v2.8.1
        with:
          cosign-release: 'v2.1.1'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: ./ci/gha-runner-image/
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          
      - name: Sign the published Docker image
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign --yes ${{env.REGISTRY}}/${{env.IMAGE_NAME}}@${{steps.build-and-push.outputs.digest}}
          
      - name: Output image
        id: image
        run: |
          echo "image=${REGISTRY}/${IMAGE_NAME}:${{ github.ref_name }}" >> $GITHUB_OUTPUT

  build-openeuler:
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build-and-push-openeuler.outputs.digest }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v2.8.1
        with:
          cosign-release: 'v2.1.1'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push OpenEuler Docker image
        id: build-and-push-openeuler
        uses: docker/build-push-action@v4
        with:
          context: ./ci/gha-runner-image/
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/cncf/gha-runner:openeuler
          labels: ${{ steps.meta.outputs.labels }}
          file: ./ci/gha-runner-image/Dockerfile.openeuler
          
      - name: Sign the published OpenEuler Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: cosign sign -y ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:openeuler
        
      - name: Output image
        id: image
        run: |
          echo "image=${REGISTRY}/${IMAGE_NAME}:openeuler" >> $GITHUB_OUTPUT

  # Image validation job
  validate:
    name: validate images
    needs: [build, build-openeuler]
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    permissions:
      packages: read
    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v2.8.1
        with:
          cosign-release: 'v2.1.1'
          
      - name: Verify standard image
        env:
          IMAGE_NAME: ${{ needs.build.outputs.image }}
          IMAGE_DIGEST: ${{ needs.build.outputs.digest }}
        run: |
          echo "Verifying image: $IMAGE_NAME@$IMAGE_DIGEST"
          
          if [ -z "$IMAGE_DIGEST" ]; then
            echo "Error: Image digest is empty"
            exit 1
          fi
          
          COSIGN_EXPERIMENTAL=1 cosign verify $IMAGE_NAME@$IMAGE_DIGEST

      - name: Verify OpenEuler image
        env:
          IMAGE_NAME: ${{ needs.build-openeuler.outputs.image }}
          IMAGE_DIGEST: ${{ needs.build-openeuler.outputs.digest }}
        run: |
          echo "Verifying OpenEuler image: $IMAGE_NAME@$IMAGE_DIGEST"
          
          if [ -z "$IMAGE_DIGEST" ]; then
            echo "Error: OpenEuler image digest is empty"
            exit 1
          fi
          
          COSIGN_EXPERIMENTAL=1 cosign verify $IMAGE_NAME@$IMAGE_DIGEST
